# The aim of this GitHub workflow is to update the pipfile to sync with Kubeflow Training release.
name: Sync ODH-notebooks with Kubeflow-Training SDK release
on:
  workflow_dispatch:
    inputs:
      upstream-notebooks-repository-organization:
        required: true
        description: "Owner of target upstream notebooks repository used to open a PR against"
        default: "opendatahub-io"
      notebooks-target-branch:
        required: true
        description: "Target branch of upstream repository"
        default: "main"
      python-version:
        required: true
        description: "Provide the python version to be used for the notebooks"
        default: "3.11"
      notebooks-repository-organization:
        required: true
        description: "Owner of origin notebooks repository used to open a PR"
        default: "opendatahub-io"
      notebooks-repository-name:
        required: true
        description: "Name of origin notebooks repository used to open a PR"
        default: "training-notebooks"
      training-sdk-release-version:
        required: true
        description: "Provide version of the kubeflow-training-sdk release"

env:
  BRANCH_NAME: ${{ github.event.inputs.notebooks-target-branch }}
  PYTHON_VERSION: ${{ github.event.inputs.python-version }}
  TRAINING_SDK_RELEASE_VERSION: ${{ github.event.inputs.training-sdk-release-version }}
  UPDATER_BRANCH: odh-sync-updater-${{ github.run_id }}
  UPSTREAM_OWNER: ${{ github.event.inputs.upstream-notebooks-repository-organization }}
  UPSTREAM_REPO_NAME: notebooks
  REPO_OWNER: ${{ github.event.inputs.notebooks-repository-organization }}
  REPO_OWNER_USER_EMAIL: kubeflow_training@redhat.com
  REPO_OWNER_USER_NAME: kubeflow-training
  REPO_NAME: ${{ github.event.inputs.notebooks-repository-name }}
  GITHUB_TOKEN: ${{ secrets.KUBEFLOW_TRAINING_ACCOUNT_TOKEN }} # add KUBEFLOW_TRAINING_ACCOUNT_TOKEN named secret in your notebooks repo to be used here (Rights/Scopes required : repo & workflow)
  MINIMUM_SUPPORTED_PYTHON_VERSION: 3.9

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository and Sync
        run: |
          git clone https://x-access-token:${GITHUB_TOKEN}@github.com/$REPO_OWNER/$REPO_NAME.git $REPO_NAME
          cd $REPO_NAME
          git remote add upstream https://github.com/$UPSTREAM_OWNER/$UPSTREAM_REPO_NAME.git
          git config --global user.email $REPO_OWNER_USER_EMAIL
          git config --global user.name $REPO_OWNER_USER_NAME
          git remote -v
          git checkout $BRANCH_NAME
          git config pull.rebase true
          git pull upstream $BRANCH_NAME && git push -f origin $BRANCH_NAME

      - name: Setup Python environment
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pipenv'

      - name: Install pipenv and pip-versions
        run: pip install pipenv==2024.4.0 pip-versions

      - name: Update Pipfiles in accordance with Kubeflow Training latest release
        run: |
            package_name=kubeflow-training
            available_python_versions=("$PYTHON_VERSION") # add space separated python versions according to 'python-versions' specified in 'Setup Python Environment' step
            install_package_using_pipenv(){
                # args allow custom names for Pipfile and Pipfile.lock
                if [ $# -eq 2 ]; then
                    mv "${1}" Pipfile
                    mv "${2}" Pipfile.lock
                fi
                # replace existing version of cf-sdk with new version in Pipfile
                sed -i "s/$package_name = \"==[^\"]*\"/$package_name = \"==${TRAINING_SDK_RELEASE_VERSION}\"/" Pipfile
                # restore names as they were before
                if [ $# -eq 2 ]; then
                    mv Pipfile "${1}"
                    mv Pipfile.lock "${2}"
                fi
            }
            # Get the list of available versions for the package
            if ! versions=$(pipenv run pip-versions list $package_name);then
                echo "Failed to retrieve versions for $package_name"
                exit 1
            fi
            # Check if the desired version exists in the list
            if echo "$versions" | grep -q "${TRAINING_SDK_RELEASE_VERSION}"; then
                echo "Version ${TRAINING_SDK_RELEASE_VERSION} is available for $package_name"
                directories+=($(grep --exclude-dir=.git --exclude-dir=.github --exclude-dir=intel --exclude-dir=tensorflow --exclude-dir=rocm-tensorflow --include="Pipfile*" -rl "$package_name = \"==[0-9.]*\"" | xargs dirname | sort | uniq))
                counter=0
                total=${#directories[@]}
                echo -----------
                for dir in "${directories[@]}"; do
                  counter=$((counter+1))
                  echo "--Processing directory $counter '$dir' of total $total"
                  cd "$dir"
                  minimum_supported_python_version_major=$(echo "${MINIMUM_SUPPORTED_PYTHON_VERSION}" | awk -F '.' '{print $1}') #integer of MINIMUM_SUPPORTED_PYTHON_VERSION env variable
                  minimum_supported_python_version_minor=$(echo "${MINIMUM_SUPPORTED_PYTHON_VERSION}" | awk -F '.' '{print $2}') #decimal of MINIMUM_SUPPORTED_PYTHON_VERSION env variable
                  if ! [ -f "Pipfile" ]; then
                      if [ -f "Pipfile.cpu" ]; then
                          pipfile_python_version=$(grep -E '^python_version' ./Pipfile.cpu | cut -d '"' -f 2) # extracted from pipfile.cpu
                      fi
                  else
                      pipfile_python_version=$(grep -E '^python_version' ./Pipfile | cut -d '"' -f 2) # extracted from pipfile
                  fi
                  pipfile_python_version_major=$(echo "$pipfile_python_version" | awk -F '.' '{print $1}')
                  pipfile_python_version_minor=$(echo "$pipfile_python_version" | awk -F '.' '{print $2}')
                  if [[ " ${available_python_versions[@]} " =~ " ${pipfile_python_version} " && "$pipfile_python_version_major" -ge "$minimum_supported_python_version_major" && "$pipfile_python_version_minor" -ge "$minimum_supported_python_version_minor" ]]; then
                      if ! [ -f "Pipfile" ]; then
                          if [ -f "Pipfile.cpu" ]; then
                              install_package_using_pipenv Pipfile.cpu Pipfile.lock.cpu
                          fi
                          if [ -f "Pipfile.gpu" ]; then
                              install_package_using_pipenv Pipfile.gpu Pipfile.lock.gpu
                          fi
                      else
                          #install specified package
                          install_package_using_pipenv
                      fi
                      else
                      echo "Skipped installation of ${package_name} with version ${TRAINING_SDK_RELEASE_VERSION} in $dir"
                  fi
                  cd -
                  echo "$((total-counter)) directories remaining.."
                done
                # Refresh Pipfile.Lock files
                cd $REPO_NAME && make refresh-pipfilelock-files && cd -
            else
                versions_list=$(echo "$versions" | tr '\n' '   ' | sed 's/, $//')
                versions="${versions_list%,}"
                echo "Version '${TRAINING_SDK_RELEASE_VERSION}' is not available for $package_name"
                echo "Available versions for $package_name: $versions"
                exit 1
            fi

      - name: Push changes
        run: |
          cd $REPO_NAME
          git add . && git status && git checkout -b ${{ env.UPDATER_BRANCH }} && \
          git commit -am "Updated notebooks via ${{ env.UPDATER_BRANCH }} GitHub action" --signoff  &&
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$REPO_OWNER/$REPO_NAME.git
          git push origin ${{ env.UPDATER_BRANCH }}

      - name: Wait for commit to propagate
        run: sleep 15

      - name: Create Pull Request
        run: |
          gh pr create --repo $UPSTREAM_OWNER/$UPSTREAM_REPO_NAME \
            --title "$pr_title" \
            --body "$pr_body" \
            --head $REPO_OWNER:$UPDATER_BRANCH \
            --base $BRANCH_NAME
        env:
          pr_title: "[Kubeflow-Training Action] Update notebook's pipfile to sync with Kubeflow-Training SDK release ${{ env.TRAINING_SDK_RELEASE_VERSION }}"
          pr_body: |
            :rocket: This is an automated Pull Request generated by [odh-kfto-sdk-notebooks-sync.yml](https://github.com/opendatahub-io/training-operator/tree/dev/.github/workflows/odh-kfto-sdk-notebooks-sync.yml) workflow.

            This PR updates the `Pipfile` to sync with latest Kubeflow-Training SDK release.
